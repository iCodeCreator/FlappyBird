//
//  GameView.swift
//  FlappyBird
//
//  Created by abd ul‚ÄôKarim üìö on 29.07.2024.
//

import SwiftUI

enum GameState {
    case ready, active, stopped
}

struct GameView: View {
    @State private var gameState: GameState = .ready
    
    @State private var birdPosition = CGPoint(x: 100, y: 300)
    @State private var birdVelocity = CGVector(dx: 0, dy: 0)
    
    @State private var topPipeHeight = Double.random(in: 100...500)
    @State private var pipeOffset = 0.0
    @State private var passedPipe = false
    
    @State private var scores = 0
    @AppStorage(wrappedValue: 0, "highScore") private var highScore: Int
    
    @State private var lastUpdateTime = Date()
    
    private let defaultSettings = GameSettings.defaultSettings
    
    private let timer = Timer.publish(
        every: 0.01,
        on: .main,
        in: .common
    ).autoconnect()
    
    var body: some View {
        GeometryReader { geometry in
            NavigationStack {
                ZStack {
                    Image(.flappyBirdBackground)
                        .resizable()
                        .scaleEffect(
                            CGSize(
                                width: geometry.size.width * 0.003,
                                height: geometry.size.height * 0.0017
                            )
                    )
                    BirdView(birdSize: defaultSettings.birdSize)
                        .position(birdPosition)
                    
                    PipesView(
                        topPipeHeight: topPipeHeight,
                        pipeWidth: defaultSettings.pipeWidth,
                        pipeSpacing: defaultSettings.pipeSpacing
                    )
                    .offset(x: geometry.size.width + pipeOffset)
                    
                    if gameState == .ready {
                        Button(action: playButtonAction) {
                            Image(systemName: "play.fill")
                                .scaleEffect(x: 3.5, y: 3.5)
                        }
                        .foregroundColor(.white)
                    }

                    if gameState == .stopped {
                        ResultView(score: scores, highScore: highScore) {
                            resetGame()
                        }
                    }
                }
                .toolbar {
                    ToolbarItem(placement: .topBarTrailing) {
                        Text(scores.formatted())
                            .font(.largeTitle)
                            .foregroundStyle(.white)
                            .padding()
                    }
                }
                .onTapGesture {
                    if gameState == .active {
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤–≤–µ—Ä—Ö
                        birdVelocity = CGVector(dx: 0, dy: defaultSettings.jumpVelocity)
                    }
                }
                .onReceive(timer) { currentTime in
                    guard gameState == .active else { return }
                    let deltaTime = currentTime.timeIntervalSince(lastUpdateTime)
                    
                    applyGravity(deltaTime: deltaTime)
                    updateBirdPosition(deltaTime: deltaTime)
                    checkBoundaries(geometry: geometry)
                    updatePipePosition(deltaTime: deltaTime)
                    resetPipePositionIfNeeded(geometry: geometry)
                    
                    if checkCollision(with: geometry) {
                        gameState = .stopped
                    }
                    
                    updateScoresAndHighScore(geometry: geometry)
                    
                    lastUpdateTime = currentTime
                }
            }
            
        }
    }
    
    // –î–µ–π—Å—Ç–≤–∏–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É Play
    private func playButtonAction() {
        gameState = .active
        lastUpdateTime = Date()
    }
    
    // –î–µ–π—Å—Ç–≤–∏–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É Reset
    private func resetGame() {
        birdPosition = CGPoint(x: 100, y: 300)
        birdVelocity = CGVector(dx: 0, dy: 0)
        pipeOffset = 0
        topPipeHeight = Double.random(
            in: defaultSettings.minPipeHeight...defaultSettings.maxPipeHeight
        )
        scores = 0
        gameState = .ready
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
    private func applyGravity(deltaTime: TimeInterval) {
        birdVelocity.dy += Double(defaultSettings.gravity * deltaTime)
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ç–∏—Ü—ã, —É—á–∏—Ç—ã–≤–∞—è –µ—ë —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å.
    private func updateBirdPosition(deltaTime: TimeInterval) {
        birdPosition.y += birdVelocity.dy * Double(deltaTime)
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–¥–µ–Ω–∏—è –ø—Ç–∏—Ü—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥—Ä—É–Ω—Ç–∞
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø–æ–ª—ë—Ç–∞
    private func checkBoundaries(geometry: GeometryProxy) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏ –ø—Ç–∏—Ü–∞ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        if birdPosition.y <= 0 {
            birdPosition.y = 0
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏ –ø—Ç–∏—Ü–∞ –≥—Ä—É–Ω—Ç–∞
        if birdPosition.y > geometry.size.height - defaultSettings.groundHeight - defaultSettings.birdSize / 2 {
            birdPosition.y = geometry.size.height - defaultSettings.groundHeight - defaultSettings.birdSize / 2
            birdVelocity.dy = 0
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å—Ç–æ–ª–±–æ–≤
    private func updatePipePosition(deltaTime: TimeInterval) {
        pipeOffset -= Double(defaultSettings.pipeSpeed * deltaTime)
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–ª–±–æ–≤ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Ü–∏–∫–ª–∞
    private func resetPipePositionIfNeeded(geometry: GeometryProxy) {
        if pipeOffset <= -geometry.size.width - defaultSettings.pipeWidth {
            pipeOffset = 0
            topPipeHeight = Double.random(in: defaultSettings.minPipeHeight...defaultSettings.maxPipeHeight)
        }
    }
    
    private func checkCollision(with geometry: GeometryProxy) -> Bool {

        // –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤–æ–∫—Ä—É–≥ –ø—Ç–∏—Ü—ã
        // –ü–æ–∑–∏—Ü–∏—è –ø—Ç–∏—Ü—ã `birdPosition` —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        let birdFrame = CGRect(
            x: birdPosition.x - defaultSettings.birdRadius / 2,
            y: birdPosition.y - defaultSettings.birdRadius / 2,
            width: defaultSettings.birdRadius,
            height: defaultSettings.birdRadius
        )

        // –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤–æ–∫—Ä—É–≥ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Å—Ç–æ–ª–±–∞
        let topPipeFrame = CGRect(
            x: geometry.size.width + pipeOffset,
            y: 0,
            width: defaultSettings.pipeWidth,
            height: topPipeHeight
        )
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤–æ–∫—Ä—É–≥ –Ω–∏–∂–Ω–µ–≥–æ —Å—Ç–æ–ª–±–∞
        let bottomPipeFrame = CGRect(
            x: geometry.size.width + pipeOffset,
            y: topPipeHeight + defaultSettings.pipeSpacing,
            width: defaultSettings.pipeWidth,
            height: topPipeHeight
        )

        // –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `true`, –µ—Å–ª–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø—Ç–∏—Ü—ã
        // –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º –ª—é–±–æ–≥–æ –∏–∑ —Å—Ç–æ–ª–±–æ–≤
        return birdFrame.intersects(topPipeFrame) || birdFrame.intersects(bottomPipeFrame)
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤ –∏ —Ä–µ–∫–æ—Ä–¥–∞
    private func updateScoresAndHighScore(geometry: GeometryProxy) {
        if pipeOffset + defaultSettings.pipeWidth + geometry.size.width < birdPosition.x && !passedPipe {
            scores += 1
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞
            if scores > highScore {
                highScore = scores
            }
            // –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç–∞
            passedPipe = true
        } else if pipeOffset + geometry.size.width > birdPosition.x {
            // –°–±—Ä–æ—Å –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç—Ä—É–±, –ø–æ—Å–ª–µ –∏—Ö –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
            passedPipe = false
        }
    }
}

#Preview {
    GameView()
}
